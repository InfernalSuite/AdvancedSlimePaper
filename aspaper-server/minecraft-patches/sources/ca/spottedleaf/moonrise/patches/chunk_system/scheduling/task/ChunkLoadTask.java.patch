--- a/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/task/ChunkLoadTask.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/task/ChunkLoadTask.java
@@ -33,7 +_,7 @@
     private static final Logger LOGGER = LoggerFactory.getLogger(ChunkLoadTask.class);
 
     public final NewChunkHolder chunkHolder;
-    private final ChunkDataLoadTask loadTask;
+    private final com.infernalsuite.asp.level.chunk.CommonLoadTask loadTask; // ASP
 
     private volatile boolean cancelled;
     private NewChunkHolder.GenericDataLoadTaskCallback entityLoadTask;
@@ -45,11 +_,20 @@
                          final NewChunkHolder chunkHolder, final Priority priority) {
         super(scheduler, world, chunkX, chunkZ);
         this.chunkHolder = chunkHolder;
-        this.loadTask = new ChunkDataLoadTask(scheduler, world, chunkX, chunkZ, priority);
-        this.loadTask.addCallback((final GenericDataLoadTask.TaskResult<ChunkAccess, Throwable> result) -> {
-            ChunkLoadTask.this.loadResult = result; // must be before getAndDecrement
-            ChunkLoadTask.this.tryCompleteLoad();
-        });
+        // ASWM start
+        if (world instanceof com.infernalsuite.asp.level.chunk.SlimeLevelInstance levelInstance) {
+            this.loadTask = levelInstance.getLoadTask(this, scheduler, world, chunkX, chunkZ, priority, result -> {
+                ChunkLoadTask.this.loadResult = result; // must be before getAndDecrement
+                ChunkLoadTask.this.tryCompleteLoad();
+            });
+        } else {
+            this.loadTask = new ChunkDataLoadTask(scheduler, world, chunkX, chunkZ, priority);
+            ((ChunkDataLoadTask) this.loadTask).addCallback((final GenericDataLoadTask.TaskResult<ChunkAccess, Throwable> result) -> {
+                ChunkLoadTask.this.loadResult = result; // must be before getAndDecrement
+                ChunkLoadTask.this.tryCompleteLoad();
+            });
+        }
+        // ASWM end
     }
 
     private void tryCompleteLoad() {
@@ -276,7 +_,7 @@
 
     private static record ReadChunk(ProtoChunk protoChunk, SerializableChunkData chunkData) {}
 
-    private static final class ChunkDataLoadTask extends CallbackDataLoadTask<ReadChunk, ChunkAccess> {
+    private static final class ChunkDataLoadTask extends CallbackDataLoadTask<ReadChunk, ChunkAccess> implements com.infernalsuite.asp.level.CommonLoadTask { // ASP
         private ChunkDataLoadTask(final ChunkTaskScheduler scheduler, final ServerLevel world, final int chunkX,
                                   final int chunkZ, final Priority priority) {
             super(scheduler, world, chunkX, chunkZ, MoonriseRegionFileIO.RegionFileType.CHUNK_DATA, priority);
