From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kyngs <kyngs@users.noreply.github.com>
Date: Sat, 1 Jun 2024 18:57:39 +0200
Subject: [PATCH] Separate plugin and server, rework API (to v3)


diff --git a/build.gradle.kts b/build.gradle.kts
index 22931927ac8c1fcdc45d44f8d4a898a44831039c..e10d95ce805d03fa43f526dc0a1a1123a67b4f0c 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -29,6 +29,7 @@ dependencies {
     // ASWM start
     implementation(project(":slimeworldmanager-api"))
     implementation(project(":core"))
+    implementation("commons-io:commons-io:2.11.0")
     // ASWM end
     // Paper start
     implementation("org.jline:jline-terminal-ffm:3.27.1") // use ffm on java 22+
diff --git a/src/main/java/com/infernalsuite/aswm/AdvancedSlimePaper.java b/src/main/java/com/infernalsuite/aswm/AdvancedSlimePaper.java
new file mode 100644
index 0000000000000000000000000000000000000000..719bfb548cfe69cbb726d95b68527bdf45f1eb52
--- /dev/null
+++ b/src/main/java/com/infernalsuite/aswm/AdvancedSlimePaper.java
@@ -0,0 +1,243 @@
+package com.infernalsuite.aswm;
+
+import com.flowpowered.nbt.CompoundMap;
+import com.flowpowered.nbt.CompoundTag;
+import com.infernalsuite.aswm.api.SlimeNMSBridge;
+import com.infernalsuite.aswm.api.AdvancedSlimePaperAPI;
+import com.infernalsuite.aswm.api.events.LoadSlimeWorldEvent;
+import com.infernalsuite.aswm.api.exceptions.*;
+import com.infernalsuite.aswm.api.loaders.SlimeLoader;
+import com.infernalsuite.aswm.api.world.SlimeWorld;
+import com.infernalsuite.aswm.api.world.SlimeWorldInstance;
+import com.infernalsuite.aswm.api.world.properties.SlimePropertyMap;
+import com.infernalsuite.aswm.level.SlimeLevelInstance;
+import com.infernalsuite.aswm.serialization.anvil.AnvilImportData;
+import com.infernalsuite.aswm.serialization.anvil.AnvilWorldReader;
+import com.infernalsuite.aswm.serialization.slime.SlimeSerializer;
+import com.infernalsuite.aswm.serialization.slime.reader.SlimeWorldReaderRegistry;
+import com.infernalsuite.aswm.skeleton.SkeletonSlimeWorld;
+import com.infernalsuite.aswm.util.NmsUtil;
+import net.minecraft.server.level.ServerLevel;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.event.world.WorldLoadEvent;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.spigotmc.AsyncCatcher;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+
+public class AdvancedSlimePaper implements AdvancedSlimePaperAPI {
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(AdvancedSlimePaper.class);
+    private static final SlimeNMSBridge BRIDGE_INSTANCE = SlimeNMSBridge.instance();
+
+    private final Map<String, SlimeWorld> loadedWorlds = new ConcurrentHashMap<>();
+
+    static {
+        System.setProperty("org.slf4j.simpleLogger.showShortLogName", "true");
+    }
+
+    public static AdvancedSlimePaper instance() {
+        return (AdvancedSlimePaper) AdvancedSlimePaperAPI.instance();
+    }
+
+    @Override
+    public SlimeWorld readWorld(SlimeLoader loader, String worldName, boolean readOnly, SlimePropertyMap propertyMap) throws UnknownWorldException, IOException, CorruptedWorldException, NewerFormatException {
+        Objects.requireNonNull(loader, "Loader cannot be null");
+        Objects.requireNonNull(worldName, "World name cannot be null");
+        Objects.requireNonNull(propertyMap, "Properties cannot be null");
+
+        long start = System.currentTimeMillis();
+
+        LOGGER.info("Reading world {}.", worldName);
+        byte[] serializedWorld = loader.readWorld(worldName);
+
+        SlimeWorld slimeWorld = SlimeWorldReaderRegistry.readWorld(loader, worldName, serializedWorld, propertyMap, readOnly);
+        LOGGER.info("Applying datafixers for {}.", worldName);
+        SlimeWorld dataFixed = SlimeNMSBridge.instance().applyDataFixers(slimeWorld);
+
+        // If the dataFixed and slimeWorld are same, then no datafixers were applied
+        if (!readOnly && dataFixed != slimeWorld)
+            loader.saveWorld(worldName, SlimeSerializer.serialize(dataFixed)); // Write dataFixed world back to loader
+
+        LOGGER.info("World {} read in {}ms.", worldName, System.currentTimeMillis() - start);
+
+        return dataFixed;
+    }
+
+    @Override
+    public SlimeWorld loadWorld(SlimeWorld world, boolean callWorldLoadEvent) throws IllegalArgumentException {
+        AsyncCatcher.catchOp("SWM world load");
+        Objects.requireNonNull(world, "SlimeWorld cannot be null");
+
+        if (Bukkit.getWorld(world.getName()) != null) {
+            throw new IllegalArgumentException("World " + world.getName() + " is already loaded");
+        }
+
+        LOGGER.info("Loading world {}...", world.getName());
+        long start = System.currentTimeMillis();
+
+        SlimeWorldInstance instance = BRIDGE_INSTANCE.loadInstance(world);
+        SlimeWorld mirror = instance.getSlimeWorldMirror();
+
+        Bukkit.getPluginManager().callEvent(new LoadSlimeWorldEvent(mirror));
+        if (callWorldLoadEvent) {
+            Bukkit.getPluginManager().callEvent(new WorldLoadEvent(instance.getBukkitWorld()));
+        }
+
+        registerWorld(mirror);
+
+        LOGGER.info("World {} loaded in {}ms.", world.getName(), System.currentTimeMillis() - start);
+        return mirror;
+    }
+
+    @Override
+    public boolean worldLoaded(SlimeWorld world) {
+        return loadedWorlds.containsKey(world.getName());
+    }
+
+    @Override
+    public void saveWorld(SlimeWorld world) throws IOException {
+        Objects.requireNonNull(world, "SlimeWorld cannot be null");
+        if (worldLoaded(world)) {
+            Future<?>[] future = new Future[1];
+
+            // This is not pretty, but we really need to hop onto the main thread
+            NmsUtil.runSyncAndWait(() -> {
+                World bukkitWorld = Bukkit.getWorld(world.getName());
+
+                ServerLevel level = ((CraftWorld) bukkitWorld).getHandle();
+                if (level instanceof SlimeLevelInstance slimeLevel) {
+                    future[0] = slimeLevel.save();
+                } else {
+                    // Shouldn't happen
+                    LOGGER.warn("ServerLevel based off of SlimeWorld is not an instance of SlimeLevelInstance. Falling back to default save method.");
+                    bukkitWorld.save();
+                }
+            });
+
+            if (future[0] != null) {
+                try {
+                    future[0].get();
+                } catch (InterruptedException exception) {
+                    throw new RuntimeException(exception);
+                } catch (ExecutionException e) {
+                    if (e.getCause() instanceof IOException ioException) {
+                        throw ioException;
+                    } else {
+                        throw new RuntimeException(e.getCause());
+                    }
+                }
+            }
+        } else {
+            LOGGER.info("Saving unloaded world {}...", world.getName());
+            Objects.requireNonNull(world.getLoader(), "World loader cannot be null");
+            long start = System.currentTimeMillis();
+
+            byte[] serializedWorld = SlimeSerializer.serialize(world);
+
+            long saveStart = System.currentTimeMillis();
+            world.getLoader().saveWorld(world.getName(), serializedWorld);
+
+            LOGGER.info("World {} serialized in {}ms and saved in {}ms.", world.getName(), saveStart - start, System.currentTimeMillis() - saveStart);
+        }
+
+    }
+
+    @Override
+    public SlimeWorld getLoadedWorld(String worldName) {
+        return loadedWorlds.get(worldName);
+    }
+
+    @Override
+    public List<SlimeWorld> getLoadedWorlds() {
+        return List.copyOf(loadedWorlds.values());
+    }
+
+    @Override
+    public SlimeWorld createEmptyWorld(String worldName, boolean readOnly, SlimePropertyMap propertyMap, SlimeLoader loader) {
+        Objects.requireNonNull(worldName, "World name cannot be null");
+        Objects.requireNonNull(propertyMap, "Properties cannot be null");
+
+        return new SkeletonSlimeWorld(worldName, loader, readOnly, Map.of(), new CompoundTag("", new CompoundMap()), propertyMap, BRIDGE_INSTANCE.getCurrentVersion());
+    }
+
+    @Override
+    public void migrateWorld(String worldName, SlimeLoader currentLoader, SlimeLoader newLoader) throws IOException, WorldAlreadyExistsException, UnknownWorldException {
+        Objects.requireNonNull(worldName, "World name cannot be null");
+        Objects.requireNonNull(currentLoader, "Current loader cannot be null");
+        Objects.requireNonNull(newLoader, "New loader cannot be null");
+
+        if (newLoader.worldExists(worldName)) {
+            throw new WorldAlreadyExistsException(worldName);
+        }
+
+        byte[] serializedWorld = currentLoader.readWorld(worldName);
+        newLoader.saveWorld(worldName, serializedWorld);
+        currentLoader.deleteWorld(worldName);
+    }
+
+    @Override
+    public SlimeWorld readVanillaWorld(File worldDir, String worldName, SlimeLoader loader) throws InvalidWorldException, WorldLoadedException, WorldTooBigException, IOException, WorldAlreadyExistsException {
+        Objects.requireNonNull(worldDir, "World directory cannot be null");
+        Objects.requireNonNull(worldName, "World name cannot be null");
+
+        if (loader != null && loader.worldExists(worldName)) {
+            throw new WorldAlreadyExistsException(worldName);
+        }
+
+        World bukkitWorld = Bukkit.getWorld(worldName);
+
+        if (bukkitWorld != null && BRIDGE_INSTANCE.getInstance(bukkitWorld) == null) {
+            throw new WorldLoadedException(worldDir.getName());
+        }
+
+        SlimeWorld world;
+
+        try {
+            world = AnvilWorldReader.INSTANCE.readFromData(new AnvilImportData(worldDir, worldName, loader));
+        } catch (RuntimeException e) {
+            if (e.getCause() == null) {
+                throw e;
+            }
+            if (e.getCause() instanceof IOException ioException) {
+                throw ioException;
+            } else if (e.getCause() instanceof InvalidWorldException invalidWorldException) {
+                throw invalidWorldException;
+            } else {
+                throw e;
+            }
+        }
+
+        // A sanity check to make sure the world is not too big to be serialized
+        try {
+            SlimeSerializer.serialize(world);
+        } catch (IndexOutOfBoundsException ex) {
+            throw new WorldTooBigException(worldDir.getName());
+        }
+
+        return world;
+    }
+
+    /**
+     * Utility method to register a <b>loaded</b> {@link SlimeWorld} with the internal map (for {@link #getLoadedWorld} calls)
+     *
+     * @param world the world to register
+     */
+    private void registerWorld(SlimeWorld world) {
+        this.loadedWorlds.put(world.getName(), world);
+    }
+
+    public void onWorldUnload(String name) {
+        this.loadedWorlds.remove(name);
+    }
+}
diff --git a/src/main/java/com/infernalsuite/aswm/InternalPlugin.java b/src/main/java/com/infernalsuite/aswm/InternalPlugin.java
index 61518ab2b68e7a41500f3c8c8a5ec1230597f0e5..875960d0c9fdcbcb3250abc05cfbde48eec0f15a 100644
--- a/src/main/java/com/infernalsuite/aswm/InternalPlugin.java
+++ b/src/main/java/com/infernalsuite/aswm/InternalPlugin.java
@@ -1,14 +1,36 @@
 package com.infernalsuite.aswm;
 
+import io.papermc.paper.plugin.lifecycle.event.LifecycleEventManager;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Server;
-import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.generator.BiomeProvider;
+import org.bukkit.generator.ChunkGenerator;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.PluginBase;
+import org.bukkit.plugin.PluginDescriptionFile;
+import org.bukkit.plugin.PluginLoader;
 import org.bukkit.plugin.PluginLogger;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.logging.LogRecord;
+import java.io.File;
+import java.io.InputStream;
+import java.util.List;
 
-public class InternalPlugin extends MinecraftInternalPlugin {
+public class InternalPlugin extends PluginBase {
+    private boolean enabled = true;
+
+    private final String pluginName;
+    private PluginDescriptionFile pdf;
+
+    public InternalPlugin() {
+        this.pluginName = "Minecraft";
+        pdf = new PluginDescriptionFile(pluginName, "1.0", "nms");
+    }
 
     @Override
     public @NotNull Server getServer() {
@@ -25,4 +47,113 @@ public class InternalPlugin extends MinecraftInternalPlugin {
         };
     }
 
+    public void setEnabled(boolean enabled) {
+        this.enabled = enabled;
+    }
+
+    @Override
+    public File getDataFolder() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public PluginDescriptionFile getDescription() {
+        return pdf;
+    }
+    // Paper start
+    @Override
+    public io.papermc.paper.plugin.configuration.PluginMeta getPluginMeta() {
+        return pdf;
+    }
+    // Paper end
+
+    @Override
+    public FileConfiguration getConfig() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public InputStream getResource(String filename) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void saveConfig() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void saveDefaultConfig() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void saveResource(String resourcePath, boolean replace) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void reloadConfig() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public PluginLoader getPluginLoader() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return enabled;
+    }
+
+    @Override
+    public void onDisable() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void onLoad() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void onEnable() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public boolean isNaggable() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public void setNaggable(boolean canNag) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public ChunkGenerator getDefaultWorldGenerator(String worldName, String id) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public @Nullable BiomeProvider getDefaultBiomeProvider(@NotNull String worldName, @Nullable String id) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    @Override
+    public LifecycleEventManager<Plugin> getLifecycleManager() {
+        throw new UnsupportedOperationException("Not supported.");
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java b/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java
index 18f0f7933c42a7609a3d7bd775b24c372baae175..962c5ebf73261d0ba19b781d9269ef7ffee8b97d 100644
--- a/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java
+++ b/src/main/java/com/infernalsuite/aswm/SlimeNMSBridgeImpl.java
@@ -48,8 +48,6 @@ public class SlimeNMSBridgeImpl implements SlimeNMSBridge {
     private static final CraftPersistentDataTypeRegistry REGISTRY = new CraftPersistentDataTypeRegistry();
     private static final SimpleDataFixerConverter DATA_FIXER_CONVERTER = new SimpleDataFixerConverter();
 
-    private static final Logger LOGGER = LogManager.getLogger("SWM");
-
     private SlimeWorld defaultWorld;
     private SlimeWorld defaultNetherWorld;
     private SlimeWorld defaultEndWorld;
@@ -130,6 +128,13 @@ public class SlimeNMSBridgeImpl implements SlimeNMSBridge {
         return true;
     }
 
+    /**
+     * Sets the default worlds for the server.<br>
+     * <b>NOTE: These worlds should be unloaded!</b>
+     * @param normalWorld The default overworld
+     * @param netherWorld The default nether
+     * @param endWorld The default end
+     */
     @Override
     public void setDefaultWorlds(SlimeWorld normalWorld, SlimeWorld netherWorld, SlimeWorld endWorld) {
         if (normalWorld != null) {
diff --git a/src/main/java/com/infernalsuite/aswm/level/NMSSlimeChunk.java b/src/main/java/com/infernalsuite/aswm/level/NMSSlimeChunk.java
index b295d159200e3bf0e48f851ac206b2e09b756bb2..6ef45be4a76c00be5fbfcdb543882fcf41ea6271 100644
--- a/src/main/java/com/infernalsuite/aswm/level/NMSSlimeChunk.java
+++ b/src/main/java/com/infernalsuite/aswm/level/NMSSlimeChunk.java
@@ -31,13 +31,14 @@ import net.minecraft.world.level.chunk.storage.ChunkSerializer;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.lighting.LevelLightEngine;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 
 public class NMSSlimeChunk implements SlimeChunk {
-    private static final Logger LOGGER = LogUtils.getClassLogger();
+    private static final Logger LOGGER = LoggerFactory.getLogger(NMSSlimeChunk.class);
 
     private static final CompoundTag EMPTY_BLOCK_STATE_PALETTE;
     private static final CompoundTag EMPTY_BIOME_PALETTE;
diff --git a/src/main/java/com/infernalsuite/aswm/level/NMSSlimeWorld.java b/src/main/java/com/infernalsuite/aswm/level/NMSSlimeWorld.java
index 004d7bcc5b35c76855787dcf32fe460e73cab38f..56c5db9a22af8ddd1d459bcf1f5b3fc7ca809b72 100644
--- a/src/main/java/com/infernalsuite/aswm/level/NMSSlimeWorld.java
+++ b/src/main/java/com/infernalsuite/aswm/level/NMSSlimeWorld.java
@@ -35,7 +35,7 @@ public class NMSSlimeWorld implements SlimeWorld {
 
     @Override
     public SlimeLoader getLoader() {
-        return this.instance.slimeInstance.getSaveStrategy();
+        return this.instance.slimeInstance.getLoader();
     }
 
     @Override
@@ -50,7 +50,7 @@ public class NMSSlimeWorld implements SlimeWorld {
 
     @Override
     public Collection<SlimeChunk> getChunkStorage() {
-        List<ChunkHolder> chunks = io.papermc.paper.chunk.system.ChunkSystem.getVisibleChunkHolders(this.instance); // Paper
+        List<ChunkHolder> chunks = ca.spottedleaf.moonrise.common.util.ChunkSystem.getVisibleChunkHolders(this.instance); // Paper
         return chunks.stream().map(ChunkHolder::getFullChunkNow).filter(Objects::nonNull)
                 .map((chunkLevel) -> new NMSSlimeChunk(chunkLevel, memoryWorld.getChunk(chunkLevel.getPos().x, chunkLevel.getPos().z))) // This sucks, is there a better way?
                 .collect(Collectors.toList());
diff --git a/src/main/java/com/infernalsuite/aswm/level/SlimeInMemoryWorld.java b/src/main/java/com/infernalsuite/aswm/level/SlimeInMemoryWorld.java
index b54b231e22967eb0b34e6ba9b7ec9cdf64bad87e..114da62698c2897b16042327a4171f785bc58cec 100644
--- a/src/main/java/com/infernalsuite/aswm/level/SlimeInMemoryWorld.java
+++ b/src/main/java/com/infernalsuite/aswm/level/SlimeInMemoryWorld.java
@@ -145,7 +145,7 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
 
     @Override
     public boolean isReadOnly() {
-        return this.getSaveStrategy() == null || this.readOnly;
+        return this.getLoader() == null || this.readOnly;
     }
 
     @Override
@@ -185,11 +185,6 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
         return this.liveWorld.getDataVersion();
     }
 
-    @Override
-    public SlimeLoader getSaveStrategy() {
-        return this.loader;
-    }
-
     @Override
     public CompoundTag getExtraData() {
         return this.extra;
diff --git a/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java b/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java
index b28c2b917accc0249e5df19a65db8820336b7279..2265f83768c4dc29f67d29730c4be45a194727da 100644
--- a/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java
+++ b/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java
@@ -24,7 +24,6 @@ import net.minecraft.util.ProgressListener;
 import net.minecraft.util.Unit;
 import net.minecraft.util.datafix.DataFixers;
 import net.minecraft.world.Difficulty;
-import net.minecraft.world.RandomSequences;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.biome.Biome;
@@ -34,11 +33,11 @@ import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.PrimaryLevelData;
 import net.minecraft.world.level.validation.DirectoryValidator;
-import net.minecraft.world.level.validation.PathAllowList;
 import org.apache.commons.io.FileUtils;
 import org.bukkit.Bukkit;
 import org.bukkit.event.world.WorldSaveEvent;
 import org.jetbrains.annotations.Nullable;
+import org.spigotmc.AsyncCatcher;
 
 import java.io.IOException;
 import java.nio.file.Files;
@@ -46,6 +45,7 @@ import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.UUID;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.Future;
@@ -77,8 +77,6 @@ public class SlimeLevelInstance extends ServerLevel {
 
     private final Object saveLock = new Object();
 
-    private boolean ready = false;
-
     public SlimeLevelInstance(SlimeBootstrap slimeBootstrap, PrimaryLevelData primaryLevelData,
                               ResourceKey<net.minecraft.world.level.Level> worldKey,
                               ResourceKey<LevelStem> dimensionKey, LevelStem worldDimension,
@@ -115,8 +113,13 @@ public class SlimeLevelInstance extends ServerLevel {
 
     @Override
     public void save(@Nullable ProgressListener progressUpdate, boolean forceSave, boolean savingDisabled, boolean close) {
+        if (!savingDisabled) save();
+    }
+
+    public Future<?> save() {
+        AsyncCatcher.catchOp("SWM world save");
         try {
-            if (!this.slimeInstance.isReadOnly() && !savingDisabled) {
+            if (!this.slimeInstance.isReadOnly() && this.slimeInstance.getLoader() != null) {
                 Bukkit.getPluginManager().callEvent(new WorldSaveEvent(getWorld()));
 
                 //this.getChunkSource().save(forceSave);
@@ -128,16 +131,17 @@ public class SlimeLevelInstance extends ServerLevel {
                 net.minecraft.nbt.CompoundTag nbtTagCompound = this.serverLevelData.createTag(MinecraftServer.getServer().registryAccess(), compound);
 
                 if (MinecraftServer.getServer().isStopped()) { // Make sure the world gets saved before stopping the server by running it from the main thread
-                    save().get(); // Async wait for it to finish
-                    this.slimeInstance.getLoader().unlockWorld(this.slimeInstance.getName()); // Unlock
+                    saveInternal().get(); // Async wait for it to finish
                 } else {
-                    this.save();
+                    return this.saveInternal();
                     //WORLD_SAVER_SERVICE.execute(this::save);
                 }
             }
         } catch (Throwable e) {
             e.printStackTrace();
+            return CompletableFuture.failedFuture(e);
         }
+        return CompletableFuture.completedFuture(null);
     }
 
     @Override
@@ -147,7 +151,7 @@ public class SlimeLevelInstance extends ServerLevel {
         }
     }
 
-    private Future<?> save() {
+    private Future<?> saveInternal() {
         synchronized (saveLock) { // Don't want to save the SlimeWorld from multiple threads simultaneously
             SlimeWorldInstance slimeWorld = this.slimeInstance;
             Bukkit.getLogger().log(Level.INFO, "Saving world " + this.slimeInstance.getName() + "...");
@@ -158,7 +162,7 @@ public class SlimeLevelInstance extends ServerLevel {
                 try {
                     byte[] serializedWorld = SlimeSerializer.serialize(world);
                     long saveStart = System.currentTimeMillis();
-                    slimeWorld.getSaveStrategy().saveWorld(slimeWorld.getName(), serializedWorld);
+                    slimeWorld.getLoader().saveWorld(slimeWorld.getName(), serializedWorld);
                     Bukkit.getLogger().log(Level.INFO, "World " + slimeWorld.getName() + " serialized in " + (saveStart - start) + "ms and saved in " + (System.currentTimeMillis() - saveStart) + "ms.");
                 } catch (IOException | IllegalStateException ex) {
                     ex.printStackTrace();
diff --git a/src/main/java/com/infernalsuite/aswm/util/NmsUtil.java b/src/main/java/com/infernalsuite/aswm/util/NmsUtil.java
index 3500005bb09dc484bc333f1e0799613d097a37d3..4a5a6f208ad91fd861bd6f2b2c008ef14a547d6e 100644
--- a/src/main/java/com/infernalsuite/aswm/util/NmsUtil.java
+++ b/src/main/java/com/infernalsuite/aswm/util/NmsUtil.java
@@ -1,9 +1,46 @@
 package com.infernalsuite.aswm.util;
 
+import com.infernalsuite.aswm.InternalPlugin;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+import org.bukkit.plugin.Plugin;
+
+import java.util.concurrent.CountDownLatch;
+
 public class NmsUtil {
 
     public static long asLong(int chunkX, int chunkZ) {
         return (((long) chunkZ) * Integer.MAX_VALUE + ((long) chunkX));
         //return (long)chunkX & 4294967295L | ((long)chunkZ & 4294967295L) << 32;
     }
+
+    public static void runSyncAndWait(Runnable runnable) {
+        if (Bukkit.isPrimaryThread()) {
+            runnable.run();
+            return;
+        }
+
+        CountDownLatch latch = new CountDownLatch(1);
+        RuntimeException[] runtimeException = new RuntimeException[1];
+
+        Bukkit.getScheduler().runTask(new InternalPlugin(), () -> {
+            try {
+                runnable.run();
+            } catch (RuntimeException e) {
+                runtimeException[0] = e;
+            } finally {
+                latch.countDown();
+            }
+        });
+
+        try {
+            latch.await();
+        } catch (InterruptedException e) {
+            throw new RuntimeException(e); // Rather propagate the interrupt (and thus prevent further execution) than continue
+        }
+
+        if (runtimeException[0] != null) {
+            throw runtimeException[0];
+        }
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
index 3e82ea07ca4194844c5528446e2c4a46ff4acee5..1f8bff31ce60f9a1b143e749916fa51cf115f5d7 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
@@ -64,6 +64,15 @@ class PaperPluginInstanceManager {
     }
 
     public @Nullable Plugin getPlugin(@NotNull String name) {
+        // ASP start - Warn if someone tries to get the old API instance
+        if (name.equals("SlimeWorldManager")) {
+            server.getLogger().warning("""
+                    Hey! It seems like you're trying to access the old SlimeWorldManager API.
+                    Since 1.21.0 the API is now provided by the server directly.
+                    See the documentation at https://infernalsuite.com/docs/asp/migrating for more information.
+                    """);
+        }
+        // ASP end
         return this.lookupNames.get(name.replace(' ', '_').toLowerCase(java.util.Locale.ENGLISH)); // Paper
     }
 
diff --git a/src/main/java/io/papermc/paper/plugin/storage/SimpleProviderStorage.java b/src/main/java/io/papermc/paper/plugin/storage/SimpleProviderStorage.java
index 26422904751647a061397ce978bba752149003cd..4940083475948eac4fc06446f7ee7e1e8e04d676 100644
--- a/src/main/java/io/papermc/paper/plugin/storage/SimpleProviderStorage.java
+++ b/src/main/java/io/papermc/paper/plugin/storage/SimpleProviderStorage.java
@@ -26,6 +26,15 @@ public abstract class SimpleProviderStorage<T> implements ProviderStorage<T> {
 
     @Override
     public void register(PluginProvider<T> provider) {
+        // ASP start - sanity check for old SlimeWorldManager
+        if (provider.getMeta().getName().equals("SlimeWorldManager")) {
+            LOGGER.warn("""
+                    Hey! It looks like you're trying to load the old SlimeWorldManager plugin.
+                    ASP no longer works like that, and you should remove the plugin from your server.
+                    See the documentation at https://infernalsuite.com/docs/asp/migrating for more information.
+                    """);
+            return;
+        } // ASP end
         this.providers.add(provider);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index ac8af406180bc680d46e8edc3da0fc2e5211345a..4936c074ad73d92f3b5ed6463126abb5017e221c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -8,6 +8,7 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
 import com.google.common.collect.MapMaker;
+import com.infernalsuite.aswm.AdvancedSlimePaper;
 import com.mojang.authlib.GameProfile;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
@@ -1487,6 +1488,8 @@ public final class CraftServer implements Server {
             return false;
         }
 
+        AdvancedSlimePaper.instance().onWorldUnload(world.getName()); // ASP - Remove unloaded world from map
+
         try {
             if (save) {
                 handle.save(null, true, false); // Paper - Fix saving in unloadWorld
diff --git a/src/main/resources/META-INF/services/com.infernalsuite.aswm.api.AdvancedSlimePaperAPI b/src/main/resources/META-INF/services/com.infernalsuite.aswm.api.AdvancedSlimePaperAPI
new file mode 100644
index 0000000000000000000000000000000000000000..a01c19e4ddbc844c71ba3a0db6efb2a8082091cf
--- /dev/null
+++ b/src/main/resources/META-INF/services/com.infernalsuite.aswm.api.AdvancedSlimePaperAPI
@@ -0,0 +1 @@
+com.infernalsuite.aswm.AdvancedSlimePaper
\ No newline at end of file
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index d2a75850af9c6ad2aca66a5f994f1b587d73eac4..3b090baf12044e19150ec66017c76fc48358f1b7 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -6,7 +6,7 @@
         </Queue>
         <TerminalConsole name="TerminalConsole">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level]: [%logger] %msg%n%xEx{full}}">
+                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level]: [%c{1}] %msg%n%xEx{full}}">
                     <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
                     <!-- Disable prefix for various plugins that bypass the plugin logger -->
                     <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
@@ -16,7 +16,7 @@
         </TerminalConsole>
         <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level]: [%logger] %stripAnsi{%msg}%n%xEx{full}">
+                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level]: [%c{1}] %stripAnsi{%msg}%n%xEx{full}">
                     <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
                     <!-- Disable prefix for various plugins that bypass the plugin logger -->
                     <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
